<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation=" 
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd 
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd 
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">
    
	<!-- dataSource1
	<bean id="dataSource1" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close">
		<property name="driverClassName" value="{biz-service-a.jdbc1.driverClassName}" />
		<property name="url" value="{jdbc1.url}" />
		<property name="username" value="{jdbc1.username}" />
		<property name="password" value="{jdbc1.password}" />
		<property name="initialSize" value="{biz-service-a.jdbc1.initialSize}" />
		<property name="maxActive" value="{biz-service-a.jdbc1.maxActive}" />
		<property name="minIdle" value="{biz-service-a.jdbc1.minIdle}" />
		<property name="logAbandoned" value="true" />
		<property name="removeAbandoned" value="true" />
		<property name="removeAbandonedTimeout" value="1000" />
		<property name="maxWait" value="5000" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="true" />
		<property name="testOnReturn" value="true" />
		<property name="validationQuery" value="select 1 from dual" />
		<property name="timeBetweenEvictionRunsMillis" value="30000" />
		<property name="numTestsPerEvictionRun" value="1" />
	</bean> -->
	
	
	<!-- dataSource2
	<bean id="dataSource2" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close">
		<property name="driverClassName" value="{jdbc2.driverClassName}" />
		<property name="url" value="{jdbc2.url}" />
		<property name="username" value="{jdbc2.username}" />
		<property name="password" value="{jdbc2.password}" />
		<property name="initialSize" value="{jdbc2.initialSize}" />
		<property name="maxActive" value="{jdbc2.maxActive}" />
		<property name="minIdle" value="{jdbc2.minIdle}" />
		<property name="logAbandoned" value="true" />
		<property name="removeAbandoned" value="true" />
		<property name="removeAbandonedTimeout" value="1000" />
		<property name="maxWait" value="5000" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="true" />
		<property name="testOnReturn" value="true" />
		<property name="validationQuery" value="select 1 from dual" />
		<property name="timeBetweenEvictionRunsMillis" value="30000" />
		<property name="numTestsPerEvictionRun" value="1" />
	</bean> -->

	<!-- 将DynamicDataSource Bean加入到Spring的上下文xml配置文件中去，同时配置DynamicDataSource的targetDataSources(多数据源目标)属性的Map映射
    <bean id="dataSource" class="com.system.ds.DynamicDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry key="dataSource1" value-ref="dataSource1" />
                <entry key="dataSource2" value-ref="dataSource2"  />
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="dataSource1"/>
    </bean> -->
    
	<!-- transaction manager, use JtaTransactionManager for global tx
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean> -->

	<!--
		define the SqlSessionFactory, notice that configLocation is not needed
		when you use MapperFactoryBean
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="typeAliasesPackage" value="
			com.frame.sys.pojo;
			com.frame.user.pojo;
			" />
		<property name="mapperLocations">
			<list>
				<value>classpath*:com/frame/*/dao/mysql/*.xml</value>
				<value>classpath*:com/frame/sys/dao/oracle/*.xml</value>
			</list>
		</property>
	</bean>
	-->

	<!-- scan for mappers and let them be autowired
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="
			com.frame.sys.dao;
			com.frame.user.dao;
			" />
	</bean> -->
	
	<!-- 配置jdbc
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<constructor-arg ref="dataSource" />
	</bean> -->
	
	<!-- 配置切换数据源
	<bean id="dataSourceInterceptor" class="com.ms.biz.a.ds.DataSourceInterceptor" />
	<aop:config>
        <aop:aspect id="dataSourceAspect" ref="dataSourceInterceptor" order="0">
            <aop:pointcut id="frame" expression="execution(* com.frame.sys.dao.*.*(..)) || execution(* com.frame.sys.service.*.*(..))" />
            <aop:pointcut id="user" expression="execution(* com.frame.user.dao.*.*(..)) || execution(* com.frame.user.service.*.*(..))" />
            <aop:pointcut id="test" expression="execution(* com.frame.test.dao.*.*(..)) || execution(* com.frame.test.service.*.*(..))" />
            <aop:before pointcut-ref="frame" method="dataSource1" />
            <aop:before pointcut-ref="user" method="dataSource2" />
            <aop:before pointcut-ref="test" method="dataSource2" />
        </aop:aspect>
    </aop:config>
    
	
	<!-- 扫描注解组件并且自动的注入spring beans中. 例如,他会扫描@Controller 和@Service下的文件.所以确保此base-package设置正确. -->
	<tx:annotation-driven transaction-manager="transactionManager" order="2" />
	
    <!-- <bean id="dataSourceAspect" class="com.restful.ds.DataSourceAspect" />
    <aop:config>
        <aop:aspect ref="dataSourceAspect">
            拦截所有service方法
            <aop:pointcut id="dataSourcePointcut" expression="execution(* com.frame.*.dao.*.*(..))"/>
            <aop:before pointcut-ref="dataSourcePointcut" method="intercept" />
        </aop:aspect>
    </aop:config> -->
    
</beans>